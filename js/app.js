class Board{constructor(t){this._tiles=Array.from(document.querySelectorAll(t)),this._currentRow=0}get tiles(){return this._tiles}get currentRow(){return this._currentRow}set currentRow(t){this._currentRow=t}contents(t){return(t=t||this.tiles).map((t=>t.textContent))}word(){return this.contents(this.wordTiles())}wordTiles(){return this._getUsedTiles().slice(-Game.WORD_SIZE)}isRowFull(){return this._getUsedTiles().length%Game.WORD_SIZE==0}firstEmptyTile(){let t=this._getEmptyTiles();if(0!==t.length)return t[0]}lastBusyTile(){return this._getUsedTiles().slice(-1)[0]}isNextTileInCurrentRow(){let t=this._getUsedTiles().length;return this._inCurrentRow(t)}isThisTileInCurrentRow(){let t=this._getUsedTiles().length-1;return this._inCurrentRow(t)}_inCurrentRow(t){return(t/Game.WORD_SIZE|0)===this.currentRow}_getUsedTiles(){return this.tiles.filter((function(t){return""!==t.textContent}))}_getEmptyTiles(){return this.tiles.filter((function(t){return""===t.textContent}))}}class GameUI{static IS_LETTER=/^[a-zA-Z]$/;static ENTER_KEY="Enter";static BACKS_KEY="Backspace";constructor(t,e,s,a){this._keyboard=document.querySelectorAll(t.selectors.keys),this._messages=document.getElementById(t.selectors.messages),this._delay=t.delay,this._board=e,this._game=s,this._stats=a,this._previousKey="",this._won=!1}initialize(){document.addEventListener("keydown",(t=>{this._processKey(t.key)})),document.addEventListener("click",(t=>{let e=t.target.dataset.key;e&&this._processKey(e)}))}_processKey(t){this._isInvalid(t)||this._won||(this._isLetter(t)&&this._board.isNextTileInCurrentRow()&&this._placeLetter(t),t===GameUI.BACKS_KEY&&this._board.isThisTileInCurrentRow()&&this._deleteLetter(),t===GameUI.ENTER_KEY&&this._board.isRowFull()&&this._previousKey!==GameUI.ENTER_KEY&&this._submitWord(),this._previousKey=t)}_isInvalid(t){return!this._isLetter(t)&&!this._isSpecial(t)}_isLetter(t){return GameUI.IS_LETTER.test(t)}_isSpecial(t){return[GameUI.ENTER_KEY,GameUI.BACKS_KEY].includes(t)}_placeLetter(t){let e=this._board.firstEmptyTile();e&&(e.textContent=t)}_deleteLetter(){let t=this._board.lastBusyTile();t&&(t.textContent="")}_submitWord(){let t=this._board.word(),e=this._game.submitWord(t);this._applyEvaluationsToBoard(e),this._applyEvaluationsToKeyboard(e,t),this._checkForWin()}_applyEvaluationsToBoard(t){this._board.wordTiles().forEach(((e,s)=>{e.dataset.state=t[s].name}))}_applyEvaluationsToKeyboard(t,e){e.forEach(((e,s)=>{Array.from(this._keyboard).find((t=>t.dataset.key==e)).dataset.state=t[s].name}))}_checkForWin(){return this._game.isWin()?this._isWin():this._game.isOver()?this._isOver():void(this._board.currentRow+=1)}_isWin(){this._won=!0,this._stats.write(this._game.evaluations.length,this._won),setTimeout((()=>this._messages.textContent="Splendid!"),this._delay)}_isOver(){this._stats.write(this._game.evaluations.length,this._won);let t=`Word of the day: <span class="word">${this._game.word}</span>.`;setTimeout((()=>this._messages.innerHTML=t),this._delay)}}class Game{static TOTAL_ROWS=6;static WORD_SIZE=5;constructor(t=null){this._total_rows=t||Game.TOTAL_ROWS,this._words=Words.ALL,this.word=this._chooseWord(),this._evaluations=[]}get evaluations(){return this._evaluations}submitWord(t){let e=t.map(((t,e)=>this._evaluate(t,e)));return this.evaluations.push(e),e}isWin(){let t=this.evaluations.slice(-1);return 0!==t.length&&t[0].filter((t=>t===State.CORRECT)).length===Game.WORD_SIZE}isOver(){return this.evaluations.length>=this._total_rows}buildShareableBoard(){return this._evaluations.map((t=>t.map((t=>t.tile)).join(""))).join("\n")}_chooseWord(){let t=Math.random()*this._words.length|0;return this._words[t]}_evaluate(t,e){return t===this.word.charAt(e)?State.CORRECT:this.word.includes(t)?State.PRESENT:State.ABSENT}}class ModalStats{static STATS_KEYS=["gamesPlayed","winPercentage","currentStreak","maximumStreak"];static BAR_INDICES=[1,2,3,4,5,6];constructor(t,e,s){this._modal=new Modal(t),this._game=e,this._stats=s,this.shareButton=this._modal.share.querySelector("button"),this.shareMessage=this._modal.share.querySelector("p")}initialize(){this._modal.button.addEventListener("click",(()=>{this._displayModalContents(),this._displayShareContents(),this._modal.show()})),this._modal.modal.addEventListener("click",(()=>{this._modal.hide(),this._resetShareContents()})),this.shareButton.addEventListener("click",(t=>{t.preventDefault(),t.stopPropagation(),this.copyToClipboard()}))}copyToClipboard(){let t=this._game.buildShareableBoard();return navigator.clipboard.writeText(t).then((()=>{this.shareMessage.textContent="Copied results to Clipboard."}),(()=>{this.shareMessage.textContent="Could not copy results to Clipboard."}))}_displayModalContents(){let t=this._stats.read();this._displayStats(t),this._displayGraph(t)}_displayStats(t){ModalStats.STATS_KEYS.forEach((e=>{this._modal[`${e}`].textContent=t[e]}))}_displayGraph(t){ModalStats.BAR_INDICES.forEach((e=>{let s=this._modal[`bar${e}`],a=t.guesses[e];s.textContent=a,s.style.cssText=`--count: ${a}em`}))}_displayShareContents(){this._game.isWin()&&this.shareButton.classList.replace(this._modal.hiddenClass,this._modal.shareClass)}_resetShareContents(){this.shareMessage.textContent=""}}class Modal{constructor(t){Object.keys(t).forEach((e=>{e.endsWith("Class")?this._setClass(e,t[e]):this._setElement(e,t[e])}))}initialize(){this.button.addEventListener("click",(()=>{this.show()})),this.modal.addEventListener("click",(()=>{this.hide()}))}show(){this.modal.classList.replace(this.hiddenClass,this.visibleClass)}hide(){this.modal.classList.replace(this.visibleClass,this.hiddenClass)}_setClass(t,e){this[`${t}`]=e}_setElement(t,e){this[`${t}`]=document.getElementById(e)}}class Selectors{static CLASSES={hiddenClass:"visually-hidden",visibleClass:"visible"};static HELP={button:"help",modal:"modal-help",...Selectors.CLASSES};static SETTINGS={button:"settings",modal:"modal-settings",...Selectors.CLASSES};static STATS={button:"stats",modal:"modal-stats",gamesPlayed:"gamesPlayed",winPercentage:"winPercentage",currentStreak:"currentStreak",maximumStreak:"maximumStreak",bar1:"bar1",bar2:"bar2",bar3:"bar3",bar4:"bar4",bar5:"bar5",bar6:"bar6",share:"share",shareClass:"share-button",hiddenClass:Selectors.CLASSES.hiddenClass,visibleClass:"visible-stats"};static GAME={keys:"[data-key]",messages:"messages"}}class State{static CORRECT=new State("correct");static PRESENT=new State("present");static ABSENT=new State("absent");static fromName(t){return[State.CORRECT,State.PRESENT,State.ABSENT].find((e=>t===e.name))}constructor(t){this.name=t,this.tile=this._tile()}_tile(){return{correct:"ðŸŸ©",present:"ðŸŸ¨",absent:"â¬›"}[this.name]}}class Stats{static KEY="stats";static DEFAULT={gamesPlayed:0,winPercentage:0,currentStreak:0,maximumStreak:0,guesses:{1:0,2:0,3:0,4:0,5:0,6:0,fail:0},gamesWon:0,lastPlayed:0};read(){let t=JSON.parse(localStorage.getItem(Stats.KEY));return t||(t={...Stats.DEFAULT},t.guesses={...Stats.DEFAULT.guesses}),this._ensureValidStats(t)}write(t,e=!0){let s=this.read();s.gamesPlayed+=1,s.gamesWon+=0|e,s.winPercentage=this._winPercentage(s),s.currentStreak=this._currentStreak(s),s.maximumStreak=this._maximumStreak(s),e?s.guesses[String(t)]+=1:s.guesses.fail+=1,s.lastPlayed=Date.now(),localStorage.setItem(Stats.KEY,JSON.stringify(s))}_ensureValidStats(t){return t=this._ensureValidInteger(t,"gamesPlayed"),t=this._ensureValidPercentage(t,"winPercentage"),t=this._ensureValidInteger(t,"currentStreak"),t=this._ensureValidInteger(t,"maximumStreak"),t=this._ensureValidObject(t,"guesses"),t=this._ensureValidInteger(t,"gamesWon"),t=this._ensureValidDate(t,"lastPlayed")}_ensureValidInteger(t,e){return(!t[e]||t[e]<0)&&(t[e]=Stats.DEFAULT[e]),t}_ensureValidPercentage(t,e){return(!t[e]||t[e]<0||t[e]>100)&&(t[e]=Stats.DEFAULT[e]),t}_ensureValidObject(t,e){return t[e]&&"object"==typeof t[e]&&t[e].constructor===Object||(t[e]={...Stats.DEFAULT[e]}),t}_ensureValidDate(t,e){return(!t[e]||new Date(t[e]).getTime()<=0)&&(t[e]=Date.now()),t}_winPercentage(t){return 0|t.gamesWon/t.gamesPlayed*100}_currentStreak(t){let e=new Date(t.lastPlayed);return new Date(Date.now()).getDay()-e.getDay()<2?t.currentStreak+1:0}_maximumStreak(t){return t.maximumStreak<t.currentStreak?t.currentStreak:t.maximumStreak}}class Words{static ALL=["abbey","adieu","ahead","apple","aroma","baker","bread","brine","cater","caulk","chant","choke","clone","could","crank","crimp","cynic","dodge","drink","elder","favor","focus","frame","hoard","horse","humor","knoll","lapse","laser","lidar","light","moist","month","mount","mourn","movie","nasty","other","pause","perky","pleat","point","prick","proxy","purge","query","renew","robin","robot","rupee","saute","saute","shake","shard","shire","skill","slosh","smelt","solar","speak","stats","store","sugar","swill","tacit","tangy","tease","their","thorn","those","today","trove","ulcer","ultra","whack","wince","wrung"]}
//# sourceMappingURL=app.js.map