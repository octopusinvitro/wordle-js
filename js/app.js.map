{"version":3,"sources":["board.js","game-ui.js","game.js","modal-stats.js","modal.js","selectors.js","state.js","stats.js","words.js"],"names":["Board","[object Object]","tilesSelector","this","_tiles","Array","from","document","querySelectorAll","_currentRow","tiles","currentRow","value","map","tile","textContent","contents","wordTiles","_getUsedTiles","slice","Game","WORD_SIZE","length","emptyTiles","_getEmptyTiles","nextTile","_inCurrentRow","thisTile","tilePosition","filter","GameUI","options","board","game","stats","_keyboard","selectors","keys","_messages","getElementById","messages","_delay","delay","_board","_game","_stats","_previousKey","_won","addEventListener","event","_processKey","key","target","dataset","_isInvalid","_isLetter","isNextTileInCurrentRow","_placeLetter","BACKS_KEY","isThisTileInCurrentRow","_deleteLetter","ENTER_KEY","isRowFull","_submitWord","_isSpecial","IS_LETTER","test","includes","letter","firstEmptyTile","lastBusyTile","word","evaluations","submitWord","_applyEvaluationsToBoard","_applyEvaluationsToKeyboard","_checkForWin","forEach","index","state","name","find","isWin","_isWin","isOver","_isOver","write","setTimeout","message","innerHTML","total_rows","_total_rows","TOTAL_ROWS","_words","Words","ALL","_chooseWord","_evaluations","evaluation","_evaluate","push","lastEvaluation","State","CORRECT","join","Math","random","charAt","PRESENT","ABSENT","ModalStats","_modal","Modal","shareButton","share","querySelector","shareMessage","button","_displayModalContents","_displayShareContents","show","modal","hide","_resetShareContents","preventDefault","stopPropagation","copyToClipboard","buildShareableBoard","navigator","clipboard","writeText","then","read","_displayStats","_displayGraph","STATS_KEYS","BAR_INDICES","bar","guesses","style","cssText","classList","replace","hiddenClass","shareClass","Object","endsWith","_setClass","_setElement","visibleClass","Selectors","CLASSES","gamesPlayed","winPercentage","currentStreak","maximumStreak","bar1","bar2","bar3","bar4","bar5","bar6","_tile","correct","present","absent","Stats","1","2","3","4","5","6","fail","gamesWon","lastPlayed","JSON","parse","localStorage","getItem","KEY","DEFAULT","_ensureValidStats","totalGuesses","won","_winPercentage","_currentStreak","_maximumStreak","String","Date","now","setItem","stringify","_ensureValidInteger","_ensureValidPercentage","_ensureValidObject","_ensureValidDate","constructor","getTime","getDay"],"mappings":"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","file":"app.js","sourcesContent":["class Board {\n  constructor(tilesSelector) {\n    this._tiles = Array.from(document.querySelectorAll(tilesSelector));\n    this._currentRow = 0;\n  }\n\n  get tiles() {\n    return this._tiles;\n  }\n\n  get currentRow() {\n    return this._currentRow;\n  }\n\n  set currentRow(value) {\n    this._currentRow = value;\n  }\n\n  contents(tiles) {\n    tiles = tiles || this.tiles;\n    return tiles.map(tile => { return tile.textContent; });\n  }\n\n  word() {\n    return this.contents(this.wordTiles());\n  }\n\n  wordTiles() {\n    return this._getUsedTiles().slice(-Game.WORD_SIZE);\n  }\n\n  isRowFull() {\n    return this._getUsedTiles().length % Game.WORD_SIZE === 0;\n  }\n\n  firstEmptyTile() {\n    let emptyTiles = this._getEmptyTiles();\n\n    if (emptyTiles.length !== 0) {\n      return emptyTiles[0];\n    }\n  }\n\n  lastBusyTile() {\n    return this._getUsedTiles().slice(-1)[0];\n  }\n\n  isNextTileInCurrentRow() {\n    let nextTile = this._getUsedTiles().length;\n    return this._inCurrentRow(nextTile);\n  }\n\n  isThisTileInCurrentRow() {\n    let thisTile = this._getUsedTiles().length - 1;\n    return this._inCurrentRow(thisTile);\n  }\n\n  _inCurrentRow(tilePosition) {\n    let row = (tilePosition / Game.WORD_SIZE) | 0;\n    return row === this.currentRow;\n  }\n\n  _getUsedTiles() {\n    return this.tiles.filter(function(tile) { return tile.textContent !== ''; });\n  }\n\n  _getEmptyTiles() {\n    return this.tiles.filter(function(tile) { return tile.textContent === ''; });\n  }\n}\n","class GameUI {\n  static IS_LETTER = /^[a-zA-Z]$/;\n  static ENTER_KEY = 'Enter';\n  static BACKS_KEY = 'Backspace';\n\n  constructor(options, board, game, stats) {\n    this._keyboard = document.querySelectorAll(options.selectors.keys);\n    this._messages = document.getElementById(options.selectors.messages);\n    this._delay = options.delay;\n\n    this._board = board;\n    this._game = game;\n    this._stats = stats;\n\n    this._previousKey = '';\n    this._won = false;\n  }\n\n  initialize() {\n    document.addEventListener('keydown', event => {\n      this._processKey(event.key);\n    });\n\n    document.addEventListener('click', event => {\n      let key = event.target.dataset.key;\n      if (key) { this._processKey(key); }\n    });\n  }\n\n  _processKey(key) {\n    if (this._isInvalid(key) || this._won) {\n      return;\n    }\n\n    if (this._isLetter(key) && this._board.isNextTileInCurrentRow()) {\n      this._placeLetter(key);\n    }\n\n    if (key === GameUI.BACKS_KEY && this._board.isThisTileInCurrentRow()) {\n      this._deleteLetter();\n    }\n\n    if (key === GameUI.ENTER_KEY && this._board.isRowFull() &&\n       this._previousKey !== GameUI.ENTER_KEY) {\n      this._submitWord();\n    }\n\n    this._previousKey = key;\n  }\n\n  _isInvalid(key) {\n    return !this._isLetter(key) && !this._isSpecial(key);\n  }\n\n  _isLetter(key) {\n    return GameUI.IS_LETTER.test(key);\n  }\n\n  _isSpecial(key) {\n    return [GameUI.ENTER_KEY, GameUI.BACKS_KEY].includes(key);\n  }\n\n  _placeLetter(letter) {\n    let firstEmptyTile = this._board.firstEmptyTile();\n\n    if (firstEmptyTile) {\n      firstEmptyTile.textContent = letter;\n    }\n  }\n\n  _deleteLetter() {\n    let lastBusyTile = this._board.lastBusyTile();\n\n    if (lastBusyTile) {\n      lastBusyTile.textContent = '';\n    }\n  }\n\n  _submitWord() {\n    let word = this._board.word();\n    let evaluations = this._game.submitWord(word);\n\n    this._applyEvaluationsToBoard(evaluations);\n    this._applyEvaluationsToKeyboard(evaluations, word);\n\n    this._checkForWin();\n  }\n\n  _applyEvaluationsToBoard(evaluations) {\n    this._board.wordTiles().forEach((tile, index) => {\n      tile.dataset.state = evaluations[index].name;\n    });\n  }\n\n  _applyEvaluationsToKeyboard(evaluations, word) {\n    word.forEach((letter, index) => {\n      let key = Array.from(this._keyboard).find(key => { return key.dataset.key == letter; });\n      key.dataset.state = evaluations[index].name;\n    });\n  }\n\n  _checkForWin() {\n    if (this._game.isWin()) { return this._isWin(); }\n    if (this._game.isOver()) { return this._isOver(); }\n    this._board.currentRow += 1;\n  }\n\n  _isWin() {\n    this._won = true;\n    this._stats.write(this._game.evaluations.length, this._won);\n    setTimeout(() => this._messages.textContent = 'Splendid!', this._delay);\n  }\n\n  _isOver() {\n    this._stats.write(this._game.evaluations.length, this._won);\n    let message = `Word of the day: <span class=\"word\">${this._game.word}</span>.`;\n    setTimeout(() => this._messages.innerHTML = message, this._delay);\n  }\n}\n","class Game {\n  static TOTAL_ROWS = 6;\n  static WORD_SIZE = 5;\n\n  constructor(total_rows = null) {\n    this._total_rows = total_rows || Game.TOTAL_ROWS;\n    this._words = Words.ALL;\n    this.word = this._chooseWord();\n    this._evaluations = [];\n  }\n\n  get evaluations() {\n    return this._evaluations;\n  }\n\n  submitWord(word) {\n    let evaluation = word.map((letter, index) => {\n      return this._evaluate(letter, index);\n    });\n\n    this.evaluations.push(evaluation);\n    return evaluation;\n  }\n\n  isWin() {\n    let lastEvaluation = this.evaluations.slice(-1);\n    if (lastEvaluation.length === 0) {\n      return false;\n    }\n\n    let correct = lastEvaluation[0].filter(evaluation => evaluation === State.CORRECT);\n    return correct.length === Game.WORD_SIZE;\n  }\n\n  isOver() {\n    return this.evaluations.length >= this._total_rows;\n  }\n\n  buildShareableBoard() {\n    let rows = this._evaluations.map(evaluation => {\n      return evaluation.map(state => { return state.tile; }).join('');\n    });\n    return rows.join('\\n');\n  }\n\n  _chooseWord() {\n    let index = Math.random() * this._words.length | 0;\n    return this._words[index];\n  }\n\n  _evaluate(letter, index) {\n    if (letter === this.word.charAt(index)) {\n      return State.CORRECT;\n    }\n\n    return (this.word.includes(letter)) ? State.PRESENT : State.ABSENT;\n  }\n}\n","class ModalStats {\n  static STATS_KEYS = ['gamesPlayed', 'winPercentage', 'currentStreak', 'maximumStreak'];\n  static BAR_INDICES = [1, 2, 3, 4, 5, 6];\n\n  constructor(selectors, game, stats) {\n    this._modal = new Modal(selectors);\n    this._game = game;\n    this._stats = stats;\n\n    this.shareButton = this._modal.share.querySelector('button');\n    this.shareMessage = this._modal.share.querySelector('p');\n  }\n\n  initialize() {\n    this._modal.button.addEventListener('click', () => {\n      this._displayModalContents();\n      this._displayShareContents();\n      this._modal.show();\n    });\n\n    this._modal.modal.addEventListener('click', () => {\n      this._modal.hide();\n      this._resetShareContents();\n    });\n\n    this.shareButton.addEventListener('click', (event) => {\n      event.preventDefault();\n      event.stopPropagation();\n      this.copyToClipboard();\n    });\n  }\n\n  copyToClipboard() {\n    let board = this._game.buildShareableBoard();\n\n    return navigator.clipboard.writeText(board).then(() => {\n      this.shareMessage.textContent = 'Copied results to Clipboard.';\n    }, () => {\n      this.shareMessage.textContent = 'Could not copy results to Clipboard.';\n    });\n  }\n\n  _displayModalContents() {\n    let stats = this._stats.read();\n    this._displayStats(stats);\n    this._displayGraph(stats);\n  }\n\n  _displayStats(stats) {\n    ModalStats.STATS_KEYS.forEach(key => {\n      this._modal[`${key}`].textContent = stats[key];\n    });\n  }\n\n  _displayGraph(stats) {\n    ModalStats.BAR_INDICES.forEach(index => {\n      let bar = this._modal[`bar${index}`];\n      let value = stats.guesses[index];\n\n      bar.textContent = value;\n      bar.style.cssText = `--count: ${value}em`;\n    });\n  }\n\n  _displayShareContents() {\n    if (this._game.isWin()) {\n      this.shareButton.classList.replace(this._modal.hiddenClass, this._modal.shareClass);\n    }\n  }\n\n  _resetShareContents() {\n    this.shareMessage.textContent = '';\n  }\n}\n","class Modal {\n  constructor(selectors) {\n    Object.keys(selectors).forEach(key => {\n      key.endsWith('Class') ?\n        this._setClass(key, selectors[key]) :\n        this._setElement(key, selectors[key]);\n    });\n  }\n\n  initialize() {\n    this.button.addEventListener('click', () => { this.show(); });\n    this.modal.addEventListener('click', () => { this.hide(); });\n  }\n\n  show() {\n    this.modal.classList.replace(this.hiddenClass, this.visibleClass);\n  }\n\n  hide() {\n    this.modal.classList.replace(this.visibleClass, this.hiddenClass);\n  }\n\n  _setClass(key, value) {\n    this[`${key}`] = value;\n  }\n\n  _setElement(key, value) {\n    this[`${key}`] = document.getElementById(value);\n  }\n}\n","class Selectors {\n  static CLASSES = {\n    hiddenClass: 'visually-hidden',\n    visibleClass: 'visible'\n  };\n\n  static HELP = {\n    ...{ button: 'help', modal: 'modal-help' },\n    ...Selectors.CLASSES\n  };\n\n  static SETTINGS = {\n    ...{ button: 'settings', modal: 'modal-settings' },\n    ...Selectors.CLASSES\n  };\n\n  static STATS = {\n    button: 'stats',\n    modal: 'modal-stats',\n    gamesPlayed: 'gamesPlayed',\n    winPercentage: 'winPercentage',\n    currentStreak: 'currentStreak',\n    maximumStreak: 'maximumStreak',\n    bar1: 'bar1',\n    bar2: 'bar2',\n    bar3: 'bar3',\n    bar4: 'bar4',\n    bar5: 'bar5',\n    bar6: 'bar6',\n    share: 'share',\n    shareClass: 'share-button',\n    hiddenClass: Selectors.CLASSES.hiddenClass,\n    visibleClass: 'visible-stats'\n  };\n\n  static GAME = { keys: '[data-key]', messages: 'messages' };\n}\n","class State {\n  static CORRECT = new State('correct');\n  static PRESENT = new State('present');\n  static ABSENT = new State('absent');\n\n  static fromName(name) {\n    let enums = [State.CORRECT, State.PRESENT, State.ABSENT];\n    return enums.find(value => name === value.name);\n  }\n\n  constructor(name) {\n    this.name = name;\n    this.tile = this._tile();\n  }\n\n  _tile() {\n    let tiles = { correct: '🟩', present: '🟨', absent: '⬛' };\n    return tiles[this.name];\n  }\n}\n","class Stats {\n  static KEY = 'stats';\n  static DEFAULT = {\n    gamesPlayed: 0,\n    winPercentage: 0,\n    currentStreak: 0,\n    maximumStreak: 0,\n    guesses: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, 'fail': 0 },\n    gamesWon: 0,\n    lastPlayed: 0\n  };\n\n  read() {\n    let stats = JSON.parse(localStorage.getItem(Stats.KEY));\n\n    if (!stats) {\n      stats = { ...Stats.DEFAULT };\n      stats.guesses = { ...Stats.DEFAULT.guesses };\n    }\n\n    return this._ensureValidStats(stats);\n  }\n\n  write(totalGuesses, won = true) {\n    let stats = this.read();\n\n    stats.gamesPlayed += 1;\n    stats.gamesWon += won | 0;\n    stats.winPercentage = this._winPercentage(stats);\n    stats.currentStreak = this._currentStreak(stats);\n    stats.maximumStreak = this._maximumStreak(stats);\n    won ? stats.guesses[String(totalGuesses)] += 1 : stats.guesses.fail += 1;\n    stats.lastPlayed = Date.now();\n\n    localStorage.setItem(Stats.KEY, JSON.stringify(stats));\n  }\n\n  _ensureValidStats(stats) {\n    stats = this._ensureValidInteger(stats, 'gamesPlayed');\n    stats = this._ensureValidPercentage(stats, 'winPercentage');\n    stats = this._ensureValidInteger(stats, 'currentStreak');\n    stats = this._ensureValidInteger(stats, 'maximumStreak');\n    stats = this._ensureValidObject(stats, 'guesses');\n    stats = this._ensureValidInteger(stats, 'gamesWon');\n    stats = this._ensureValidDate(stats, 'lastPlayed');\n\n    return stats;\n  }\n\n  _ensureValidInteger(stats, key) {\n    if (!stats[key] || stats[key] < 0) {\n      stats[key] = Stats.DEFAULT[key];\n    }\n\n    return stats;\n  }\n\n  _ensureValidPercentage(stats, key) {\n    if (!stats[key] || stats[key] < 0 || stats[key] > 100) {\n      stats[key] = Stats.DEFAULT[key];\n    }\n\n    return stats;\n  }\n\n  _ensureValidObject(stats, key) {\n    if (!stats[key] || typeof stats[key] !== 'object' || stats[key].constructor !== Object) {\n      stats[key] = { ...Stats.DEFAULT[key] };\n    }\n\n    return stats;\n  }\n\n  _ensureValidDate(stats, key) {\n    if (!stats[key] || (new Date(stats[key])).getTime() <= 0) {\n      stats[key] = Date.now();\n    }\n\n    return stats;\n  }\n\n  _winPercentage(stats) {\n    let percentage = (stats.gamesWon / stats.gamesPlayed) * 100;\n\n    return percentage | 0;\n  }\n\n  _currentStreak(stats) {\n    let lastPlayed = (new Date(stats.lastPlayed));\n    let now = (new Date(Date.now()));\n    let playedNextDay = (now.getDay() - lastPlayed.getDay() < 2);\n\n    return playedNextDay ? stats.currentStreak + 1 : 0;\n  }\n\n  _maximumStreak(stats) {\n    return (stats.maximumStreak < stats.currentStreak) ? stats.currentStreak : stats.maximumStreak;\n  }\n}\n","class Words {\n  static ALL = [\n    'abbey',\n    'adieu',\n    'ahead',\n    'apple',\n    'aroma',\n    'baker',\n    'bread',\n    'brine',\n    'cater',\n    'caulk',\n    'chant',\n    'choke',\n    'clone',\n    'could',\n    'crank',\n    'crimp',\n    'cynic',\n    'dodge',\n    'drink',\n    'elder',\n    'favor',\n    'focus',\n    'frame',\n    'hoard',\n    'horse',\n    'humor',\n    'knoll',\n    'lapse',\n    'laser',\n    'lidar',\n    'light',\n    'moist',\n    'month',\n    'mount',\n    'mourn',\n    'movie',\n    'nasty',\n    'other',\n    'pause',\n    'perky',\n    'pleat',\n    'point',\n    'prick',\n    'proxy',\n    'purge',\n    'query',\n    'renew',\n    'robin',\n    'robot',\n    'rupee',\n    'saute',\n    'saute',\n    'shake',\n    'shard',\n    'shire',\n    'skill',\n    'slosh',\n    'smelt',\n    'solar',\n    'speak',\n    'stats',\n    'store',\n    'sugar',\n    'swill',\n    'tacit',\n    'tangy',\n    'tease',\n    'their',\n    'thorn',\n    'those',\n    'today',\n    'trove',\n    'ulcer',\n    'ultra',\n    'whack',\n    'wince',\n    'wrung'\n  ];\n}\n"]}